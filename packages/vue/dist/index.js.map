{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { initializeComponents, html } from \"@agc-plugins/core\";\nimport { h } from 'vue'\n\ninterface CreateComponentOptions {\n  defaultProps?: Record<string, any>; // Default props to merge with user props\n  wrapper?: (html: string) => any; // Optional wrapper function for the rendered output\n}\n\nfunction createComponent1<T extends (...args: any[]) => any>(\n  renderFunction: T,\n  options?: CreateComponentOptions\n): T {\n  return ((props: any, context: any) => {\n    let { children } = props || {};\n    const { slots } = context || {};\n\n    // Merge children and slot content\n    if (slots && slots?.default) {\n\n      children = [children, ...slots?.default()]\n        .flat()\n        .filter((child) => child !== undefined && child !== null);\n    }\n\n    const p = { ...props };\n    if (children && children.length > 0) {\n      p.children = children;\n    }\n\n    return html`<${renderFunction} ...${p}><//>`;\n  }) as T;\n}\n\n\nfunction kebabToCamelCase(str: string): string {\n  return str.replace(/-([a-z])/g, (_, char) => char.toUpperCase());\n}\n\nfunction createComponent<P>(\n  renderFunction: (props: P) => ReturnType<typeof html>\n): (props: P, context?: { slots?: Record<string, () => any> }) => ReturnType<typeof html> {\n  return (props: P, context: any) => {\n    let { children } = props as { children?: any }; // Explicitly cast props to include children\n    const { slots } = context || {};\n\n    // Merge children and slot content\n    if (slots && slots.default) {\n      children = [children, ...slots.default()]\n        .flat()\n        .filter((child) => child !== undefined && child !== null);\n    }\n    console.log(\"children: \", children)\n    console.log(\"props: \", props)\n    const transformedProps = Object.fromEntries(\n      Object.entries(props as Record<string, any>).map(([key, value]) => [kebabToCamelCase(key), value])\n    ) as P; // Explicitly assert the type to P\n\n    // Merge props with children if children exist\n    const mergedProps = { ...transformedProps };\n    if (children && children.length > 0) {\n      (mergedProps as any).children = children;\n    }\n    return renderFunction(mergedProps as P);\n  };\n}\n\ninitializeComponents(h, createComponent)\n"],"mappings":";;;AAAA,kBAA2C;AAC3C,iBAAkB;AAiClB,SAAS,iBAAiB,KAAqB;AAC7C,SAAO,IAAI,QAAQ,aAAa,CAAC,GAAG,SAAS,KAAK,YAAY,CAAC;AACjE;AAEA,SAAS,gBACP,gBACwF;AACxF,SAAO,CAAC,OAAU,YAAiB;AACjC,QAAI,EAAE,SAAS,IAAI;AACnB,UAAM,EAAE,MAAM,IAAI,WAAW,CAAC;AAG9B,QAAI,SAAS,MAAM,SAAS;AAC1B,iBAAW,CAAC,UAAU,GAAG,MAAM,QAAQ,CAAC,EACrC,KAAK,EACL,OAAO,CAAC,UAAU,UAAU,UAAa,UAAU,IAAI;AAAA,IAC5D;AACA,YAAQ,IAAI,cAAc,QAAQ;AAClC,YAAQ,IAAI,WAAW,KAAK;AAC5B,UAAM,mBAAmB,OAAO;AAAA,MAC9B,OAAO,QAAQ,KAA4B,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,iBAAiB,GAAG,GAAG,KAAK,CAAC;AAAA,IACnG;AAGA,UAAM,cAAc,EAAE,GAAG,iBAAiB;AAC1C,QAAI,YAAY,SAAS,SAAS,GAAG;AACnC,MAAC,YAAoB,WAAW;AAAA,IAClC;AACA,WAAO,eAAe,WAAgB;AAAA,EACxC;AACF;AAAA,IAEA,kCAAqB,cAAG,eAAe;","names":[]}